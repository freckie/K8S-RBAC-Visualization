# namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: viz-rbac

---
# service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-sa
  namespace: viz-rbac

---
# role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: api-role
  namespace: viz-rbac
rules:
- apiGroups: [""]
  resources: ["pods", "serviceaccounts"]
  verbs: ["get", "watch", "list"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["roles", "rolebindings", "clusterroles", "clusterrolebindings"]
  verbs: ["get", "watch", "list"]

---
# cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: api-crole
  namespace: viz-rbac
rules:
- apiGroups: [""]
  resources: ["namespaces", "pods", "serviceaccounts"]
  verbs: ["get", "watch", "list"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["roles", "rolebindings", "clusterroles", "clusterrolebindings"]
  verbs: ["get", "watch", "list"]

---
# role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: api-rolebinding
  namespace: viz-rbac
subjects:
- kind: ServiceAccount
  name: api-sa
  namespace: viz-rbac
roleRef:
  kind: Role
  name: api-role
  apiGroup: rbac.authorization.k8s.io

---
# crole-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: api-crolebinding
  namespace: viz-rbac
subjects:
- kind: ServiceAccount
  name: api-sa
  namespace: viz-rbac
roleRef:
  kind: ClusterRole
  name: api-crole
  apiGroup: rbac.authorization.k8s.io

---
# api-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: viz-rbac-api
  namespace: viz-rbac
  labels:
    app: viz-rbac-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: viz-rbac-api
  template:
    metadata:
      labels:
        app: viz-rbac-api
    spec:
      serviceAccountName: api-sa
      containers:
      - name: viz-rbac-api
        image: freckie/viz-rbac-api:0.0.1
        imagePullPolicy: Always # for development. use IfNotPresent for production
        ports:
        - name: http
          containerPort: 22000
        resources:
          requests:
            memory: "128Mi"
            cpu: "0.5"
          limits:
            memory: "256Mi"
            cpu: "1.0"

---
# api-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: viz-rbac-api
  namespace: viz-rbac
  labels:
    app: viz-rbac-api
spec:
  type: ClusterIP
  selector:
    app: viz-rbac-api
  ports:
  - name: http
    port: 22000
    targetPort: 22000

---
# web-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: viz-rbac-web
  namespace: viz-rbac
  labels:
    app: viz-rbac-web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: viz-rbac-web
  template:
    metadata:
      labels:
        app: viz-rbac-web
    spec:
      serviceAccountName: default
      containers:
      - name: viz-rbac-api
        image: freckie/viz-rbac-web:0.0.1
        imagePullPolicy: Always # for development. use IfNotPresent for production
        ports:
        - name: http
          containerPort: 22001
        resources:
          requests:
            memory: "256Mi"
            cpu: "0.5"
          limits:
            memory: "512Mi"
            cpu: "1.0"

---
# web-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: viz-rbac-web
  namespace: viz-rbac
  labels:
    app: viz-rbac-web
spec:
  type: NodePort
  selector:
    app: viz-rbac-api
  ports:
  - name: http
    port: 22001
    targetPort: 22001
    nodePort: 22001
